/*
    ---- Available function ----
    	#include <signal.h>
	1.signal
    >> 指定したシグナルが発生した時に実行されるシグナルハンドラを設定。
	2.sigemptyset
    >> 指定したシグナルセットを空にする。
    3.sigaddset
    >> 指定したシグナルをシグナルセットに追加する。
    // シグナルとシグナルセットが存在する？
    4.sigaction (?)
    >> シグナルハンドラを設定するために使用される。この関数はシグナル処理のため
    の詳細なオプションを提供する。(?)(?)(?)
	5.kill
    >> 指定したプロセスID(PID)にシグナルを送信する。

    	#include <unistd.h>
    6.getpid
    >> 現在のプロセスID(PID)を返す。
	7.pause
    >> シグナルを受信するまでプロセスを一時停止にする。シグナルを受信すると
    、シグナルハンドラが実行される。
    8.sleep
    >> 指定した秒数だけプロセスを一時停止する。
    9.usleep
    >> 指定したマイクロ秒(1秒の100万分の１)だけプロセスを一時停止する。

	What 'プロセス' is
    	>> プロセスは、コンピュータの基本的な実行単位。
    	実行中のプログラム(実際に調理中の料理)。
    What 'PID' is
    	>> プロセスIDのこと。
    	OS内で実行されている各プロセスを一意に識別するための番号。
    [PID追加情報]
    	親プロセスID(PPID): 親プロセスとは現在のプロセスを生成したプロセス。
		PID 1: システム起動時に最初に生成されるプロセス(intプロセスやsystemdプロセス)
    	がPID 1を持つ。すべてのプロセスを遡ると行き着く。
    What '割り込み' is
    	>> 現在の処理が一時停止し、緊急の処理を行うためのメカニズム。
    	   割り込みが発生すると、現在の実行状況が保存され、割り込みハンドラが
    	   実行される。割り込みハンドラが完了すると、通常の処理が再開される。
    ⭐️ gucamole(クラスター環境に接続できる)で試す。
    Valid pid -> 100 ~ 99998
    What sig_atomic_t型 is
    	>> シグナルハンドラ内で使用するために設計された特別なデータ型。
        　　int型で実装されている。
    What volatile修飾子 is
    	>> volatile修飾子は、特定の変数が予期せず変更される可能性がある
        　　ことをコンパイラに知らせるために使用される。毎回の変数への
        　　アクセス(読み書き)は、メモリから行われ、キャッシュからは
        　　行われない。利点: *非同期な変更(シグナルハンドル内の変更など)が
           予測される時に、常に更新された値を読み書きするようになる。
    非同期: 複数のタスクが同時進行し、独立して実行される状況。
    　　　　　タスクの完了を待たずに別のタスクが始まる。
*/

// やりたいこと
// プロセスIDを介して通信する。
// 0か1しか送れないので、ビット単位まで分解して送る。
// クライアント側で分解,送信 -> サーバー側で組み立て,出力
/*
	[問題点]
	簡単なプログラムは完成したが、でたらめな信号が送られてくる。
    -> クライアント側からの送信の間隔が短すぎてサーバー側が正確に
    受け取ることができなかった。usleep関数を使って送信の間隔を調節した。
	[テスト]
    10000文字のaを引数として渡す方法。
    >$ ./client <sever_pid> `python -c "print('a'*10000)"`
*/